package BFacets4.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.resources.MResource;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.project.SModuleOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.io.File;
import java.io.Writer;
import java.io.OutputStreamWriter;
import java.io.FileOutputStream;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class NewGenUtils4 {
  public static void processResources(MResource inpt, ProgressMonitor progressMonitor, final String fileExtension) {
    Sequence.fromIterable(inpt.models()).visitAll(new IVisitor<SModel>() {
      public void visit(final SModel curModel) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            try {
              String outputPath = SModuleOperations.getOutputPathFor(curModel);
              for (SNode rootNode : Sequence.fromIterable(curModel.getRootNodes())) {
                {
                  SNode nfc = rootNode;
                  if (SNodeOperations.isInstanceOf(nfc, "BFacets4.structure.RootConceptMock")) {
                    File file = new File(outputPath + "/" + rootNode.getModel().getModelName().replace(".", "/") + "/" + rootNode.getName() + "." + fileExtension);
                    file.getParentFile().mkdirs();
                    Writer w = new OutputStreamWriter(new FileOutputStream(file));
                    w.write("Begin BFacets4 (2) file, using ifInstanceOf, in " + fileExtension + "\n");
                    w.write("Mock protein name: " + SPropertyOperations.getString(nfc, "name") + "\n");
                    w.close();
                  }
                }
              }
            } catch (Exception e) {
              throw new RuntimeException(e);
            }
          }
        });

      }
    });
  }


}
